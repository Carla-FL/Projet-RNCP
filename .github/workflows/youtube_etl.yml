# .github/workflows/youtube-etl.yml
name: YouTube ETL Pipeline

on:
  schedule:
    - cron: '0 * * * *'  # Toutes les heures (5 chiffres requis)
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Forcer la mise à jour complète'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.10'

jobs:
  etl-update:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download spaCy models
      run: |
        python -m spacy download fr_core_news_sm || echo "spaCy model download failed, continuing..."
        
    - name: Create directories
      run: |
        mkdir -p logs
        mkdir -p .model_cache
        
    - name: Debug - Repository structure
      run: |
        echo "=== Repository structure ==="
        find . -name "*.py" -type f | head -20
        echo "=== Looking for maj.py ==="
        find . -name "maj.py" -type f
        echo "=== Current working directory ==="
        pwd && ls -la
        
    - name: Run YouTube ETL
      env:
        MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
        MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
        DEVELOPER_KEY: ${{ secrets.DEVELOPER_KEY }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        MODEL_PRIORITY: "finetuned,original,logistic"
        FORCE_UPDATE: ${{ github.event.inputs.force_update || 'false' }}
        PYTHONPATH: ".:src:src/utils:src/Pipeline1"
        
      run: |
        echo "Démarrage du pipeline ETL YouTube"
        echo "Timestamp: $(date)"
        echo "Force update: $FORCE_UPDATE"
        
        # Fonction pour trouver et exécuter maj.py
        find_and_run_maj() {
          # Chercher maj.py dans différents emplacements
          if [ -f "maj.py" ]; then
            echo "Trouvé: maj.py à la racine"
            python maj.py
            return 0
          elif [ -f "src/maj.py" ]; then
            echo "Trouvé: src/maj.py"
            python src/maj.py
            return 0
          elif [ -f "src/utils/maj.py" ]; then
            echo "Trouvé: src/utils/maj.py"
            python src/utils/maj.py
            return 0
          else
            echo "Recherche dans tout le repository..."
            MAJ_FILE=$(find . -name "maj.py" -type f | head -1)
            if [ -n "$MAJ_FILE" ]; then
              echo "Trouvé: $MAJ_FILE"
              python "$MAJ_FILE"
              return 0
            else
              echo "maj.py non trouvé, tentative avec synchronisation.py..."
              
              if [ -f "synchronisation.py" ]; then
                echo "Utilisation de synchronisation.py à la racine"
                python synchronisation.py
                return 0
              elif [ -f "src/synchronisation.py" ]; then
                echo "Utilisation de src/synchronisation.py"
                python src/synchronisation.py
                return 0
              else
                echo "Aucun script de synchronisation trouvé"
                return 1
              fi
            fi
          fi
        }
        
        # Exécuter la fonction
        if find_and_run_maj; then
          echo "Pipeline ETL exécuté avec succès"
        else
          echo "Impossible d'exécuter le pipeline"
          echo "Fichiers disponibles:"
          find . -name "*.py" -type f | grep -E "(maj|sync)" | sort
          exit 1
        fi
        
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: etl-logs-${{ github.run_number }}
        path: |
          logs/
          *.log
        retention-days: 7
        
    - name: Generate summary
      if: always()
      run: |
        echo "## ETL Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Completed" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "logs/summary.json" ]; then
          if command -v jq > /dev/null; then
            echo "- **Videos processed**: $(jq -r '.processed_count // "N/A"' logs/summary.json)" >> $GITHUB_STEP_SUMMARY
            echo "- **Duration**: $(jq -r '.duration_minutes // "N/A"' logs/summary.json) minutes" >> $GITHUB_STEP_SUMMARY
            echo "- **Errors**: $(jq -r '.errors | length' logs/summary.json)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Summary file**: Found" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Summary**: No summary file generated" >> $GITHUB_STEP_SUMMARY
        fi