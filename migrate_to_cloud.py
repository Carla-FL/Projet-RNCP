import os
import pymongo
import psycopg2
import pandas as pd
from datetime import datetime
import logging
from typing import Optional
import sys
from dotenv import load_dotenv
load_dotenv()

# Configuration
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CloudMigrator:
    """Gestionnaire de migration vers les services cloud"""
    
    def __init__(self):
        self.local_mongo_client = None
        self.cloud_mongo_client = None
        self.local_pg_conn = None
        self.cloud_pg_conn = None
        
    def connect_local_mongodb(self):
        """Connexion √† MongoDB local"""
        try:
            mongo_user = os.getenv("MONGO_USERNAME", "admin")
            mongo_pass = os.getenv("MONGO_PASSWORD", "")
            mongo_port = os.getenv("MONGO_PORT", "27018")

            connection_string = f"mongodb://{mongo_user}:{mongo_pass}@localhost:{mongo_port}/"
            self.local_mongo_client = pymongo.MongoClient(connection_string)
            
            # Test de connexion
            self.local_mongo_client.admin.command('ping')
            logger.info("‚úÖ Connexion MongoDB local r√©ussie")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion MongoDB local: {e}")
            return False
    
    def connect_cloud_mongodb(self, connection_string: str):
        """Connexion √† MongoDB Atlas"""
        try:
            self.cloud_mongo_client = pymongo.MongoClient(connection_string)
            
            # Test de connexion
            self.cloud_mongo_client.admin.command('ping')
            logger.info("‚úÖ Connexion MongoDB Atlas r√©ussie")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion MongoDB Atlas: {e}")
            return False
    
    def connect_local_postgresql(self):
        """Connexion √† PostgreSQL local"""
        try:
            self.local_pg_conn = psycopg2.connect(
                host="localhost",
                port=5432,
                database="prefect",
                user="prefect",
                password="prefect"
            )
            logger.info("‚úÖ Connexion PostgreSQL local r√©ussie")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion PostgreSQL local: {e}")
            return False
    
    def connect_cloud_postgresql(self, connection_string: str):
        """Connexion √† Neon PostgreSQL"""
        try:
            self.cloud_pg_conn = psycopg2.connect(connection_string)
            logger.info("‚úÖ Connexion Neon PostgreSQL r√©ussie")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion Neon PostgreSQL: {e}")
            return False
    
    def migrate_mongodb_data(self, database_name_cloud :str="youtube-analysis"): # database_name_local: str = "UCDkl5M0WVaddTWE4rr2cSeA"
        """Migration des donn√©es MongoDB"""
        if not self.local_mongo_client or not self.cloud_mongo_client:
            logger.error("‚ùå Connexions MongoDB non √©tablies")
            return False
        
        try:
            # D√©tecter automatiquement la base locale si non sp√©cifi√©e
            if not database_name_local:
                db_names = self.local_mongo_client.list_database_names()
                # Exclure les bases syst√®me
                user_dbs = [name for name in db_names if name not in ['admin', 'local', 'config']]
                if user_dbs:
                    database_name_local = user_dbs[0]  # Prendre la premi√®re base utilisateur
                    logger.info(f"üîç Base locale d√©tect√©e automatiquement: {database_name_local}")
                else:
                    logger.error("‚ùå Aucune base de donn√©es utilisateur trouv√©e")
                    return False

            # Base locale
            local_db = self.local_mongo_client[database_name_local]
            
            # Base cloud
            cloud_db = self.cloud_mongo_client[database_name_cloud]
            
            # Lister les collections
            collections = local_db.list_collection_names()
            logger.info(f"üìã Collections trouv√©es: {collections}")

            if not collections:
                logger.warning("‚ö†Ô∏è Aucune collection trouv√©e dans la base locale")
                return True
            
            total_docs = 0
            for collection_name in collections:
                logger.info(f"üîÑ Migration collection: {collection_name}")
                
                # Collection locale
                local_collection = local_db[collection_name]
                local_count = local_collection.count_documents({})
                
                if local_count == 0:
                    logger.info(f"‚è≠Ô∏è Collection {collection_name} vide, ignor√©e")
                    continue
                
                # Collection cloud
                cloud_collection = cloud_db[collection_name]
                
                #  Vider compl√®tement la collection cloud
                deleted_count = cloud_collection.delete_many({}).deleted_count
                logger.info(f"üßπ {deleted_count} documents supprim√©s de {collection_name} sur Atlas")
                
                # Migration par batch pour √©viter les timeouts
                batch_size = 500
                docs_migrated = 0

                # R√©cup√©rer tous les documents
                logger.info(f"üì• R√©cup√©ration de {local_count} documents...")
                all_docs = list(local_collection.find())
                
                # Traiter par batch
                for i in range(0, len(all_docs), batch_size):
                    batch = all_docs[i:i + batch_size]
                    batch_num = i // batch_size + 1
                    total_batches = (len(all_docs) + batch_size - 1) // batch_size
                    
                    # R√©cup√©rer le batch complet
                    try:
                        # Ins√©rer le batch (ordered=False pour continuer m√™me si erreur)
                        result = cloud_collection.insert_many(batch, ordered=False)
                        docs_migrated += len(result.inserted_ids)
                        logger.info(f"   üìÑ Batch {batch_num}/{total_batches}: {len(result.inserted_ids)} documents ins√©r√©s")
                        
                    except pymongo.errors.BulkWriteError as e:
                        # G√©rer les erreurs bulk (ex: doublons)
                        inserted_count = e.details.get('nInserted', 0)
                        docs_migrated += inserted_count
                        logger.warning(f"‚ö†Ô∏è Batch {batch_num}/{total_batches}: {inserted_count} ins√©r√©s, {len(e.details.get('writeErrors', []))} erreurs")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Erreur batch {batch_num}: {e}")
                        # Essayer document par document pour ce batch
                        for doc_idx, doc in enumerate(batch):
                            try:
                                cloud_collection.insert_one(doc)
                                docs_migrated += 1
                            except:
                                logger.debug(f"Document {doc_idx} ignor√© (probablement un doublon)")
                
                
                total_docs += docs_migrated
                logger.info(f"‚úÖ Collection {collection_name}: {docs_migrated}/{local_count} documents migr√©s")
            
            logger.info(f"üéâ Migration MongoDB termin√©e: {total_docs} documents au total migr√©s vers '{database_name_cloud}'")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur migration MongoDB: {e}")
            return False
    
    def migrate_postgresql_data(self):
        """Migration des donn√©es PostgreSQL (Prefect)"""
        if not self.local_pg_conn or not self.cloud_pg_conn:
            logger.error("‚ùå Connexions PostgreSQL non √©tablies")
            return False
        
        try:
            cloud_cur = self.cloud_pg_conn.cursor()
            
            logger.info("üîß Pr√©paration de la base Neon pour Prefect...")
            
            # Test de la connexion et r√©cup√©ration des infos
            cloud_cur.execute("SELECT version();")
            version = cloud_cur.fetchone()[0]
            logger.info(f"üìä Version PostgreSQL Neon: {version}")
            
            # Cr√©er le sch√©ma public si n√©cessaire
            try:
                cloud_cur.execute("CREATE SCHEMA IF NOT EXISTS public;")
                self.cloud_pg_conn.commit()
                logger.info("‚úÖ Sch√©ma public v√©rifi√© sur Neon")
            except Exception as e:
                logger.debug(f"Sch√©ma public existe d√©j√†: {e}")
            
            # Cr√©er une table de test pour v√©rifier les permissions
            try:
                cloud_cur.execute("""
                    CREATE TABLE IF NOT EXISTS migration_test (
                        id SERIAL PRIMARY KEY,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        status TEXT
                    );
                """)
                
                # Ins√©rer un enregistrement de test
                cloud_cur.execute("""
                    INSERT INTO migration_test (status) 
                    VALUES ('Migration script executed successfully');
                """)
                
                self.cloud_pg_conn.commit()
                
                # V√©rifier l'insertion
                cloud_cur.execute("SELECT COUNT(*) FROM migration_test;")
                count = cloud_cur.fetchone()[0]
                logger.info(f"‚úÖ Test d'√©criture r√©ussi: {count} enregistrement(s) dans migration_test")
                
                # Nettoyer
                cloud_cur.execute("DROP TABLE migration_test;")
                self.cloud_pg_conn.commit()
                
            except Exception as e:
                logger.error(f"‚ùå Test d'√©criture √©chou√©: {e}")
                return False
            
            logger.info("‚úÖ Base Neon PostgreSQL pr√™te pour Prefect")
            logger.info("‚ÑπÔ∏è Les tables Prefect se cr√©eront automatiquement au premier d√©marrage de l'orchestrateur")
            
            # Si on a une connexion locale, on peut essayer de migrer quelques m√©tadonn√©es
            if self.local_pg_conn:
                logger.info("üîÑ Tentative de migration des m√©tadonn√©es Prefect...")
                try:
                    local_cur = self.local_pg_conn.cursor()
                    
                    # V√©rifier s'il y a des donn√©es Prefect
                    local_cur.execute("""
                        SELECT COUNT(*) FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND (table_name LIKE '%prefect%' OR table_name IN ('flow', 'flow_run', 'task_run'));
                    """)
                    
                    table_count = local_cur.fetchone()[0]
                    if table_count > 0:
                        logger.info(f"üìä {table_count} tables Prefect trouv√©es localement")
                        logger.info("‚ö†Ô∏è Migration des donn√©es Prefect ignor√©e (compatibilit√©)")
                        logger.info("üí° Conseil: Red√©ploye tes flows Prefect apr√®s la migration")
                    else:
                        logger.info("‚ÑπÔ∏è Aucune table Prefect trouv√©e localement")
                        
                    local_cur.close()
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è V√©rification locale Prefect √©chou√©e: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur pr√©paration PostgreSQL: {e}")
            return False
        finally:
            if 'cloud_cur' in locals():
                cloud_cur.close()
    
    def close_connections(self):
        """Fermer toutes les connexions"""
        connections_closed = 0
        
        if self.local_mongo_client:
            self.local_mongo_client.close()
            connections_closed += 1
            
        if self.cloud_mongo_client:
            self.cloud_mongo_client.close()
            connections_closed += 1
            
        if self.local_pg_conn:
            self.local_pg_conn.close()
            connections_closed += 1
            
        if self.cloud_pg_conn:
            self.cloud_pg_conn.close()
            connections_closed += 1
            
        logger.info(f"üîå {connections_closed} connexions ferm√©es")

def check_environment():
    """V√©rifier les variables d'environnement"""
    required_vars = {
        "CONNECTING_STRING_ATLAS": "Connection string MongoDB Atlas",
        "CONNECTING_STRING_NEON": "Connection string Neon PostgreSQL"
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        if not os.getenv(var):
            missing_vars.append(f"{var} ({description})")
    
    if missing_vars:
        logger.error("‚ùå Variables d'environnement manquantes:")
        for var in missing_vars:
            logger.error(f"   - {var}")
        logger.info("")
        logger.info("üí° Configure-les dans ton fichier .env ou en variables d'environnement:")
        logger.info("export CONNECTING_STRING_ATLAS='mongodb+srv://username:password@cluster.mongodb.net/'")
        logger.info("export CONNECTING_STRING_NEON='postgresql://username:password@hostname:5432/database'")
        return False
    
    return True

def main():
    """Migration principale"""
    print("üöÄ Migration des donn√©es locales vers le cloud")
    print("=" * 60)
    
    # V√©rifier l'environnement
    if not check_environment():
        sys.exit(1)
    
    migrator = CloudMigrator()
    success = True
    
    try:
        # Phase 1: Test des connexions locales
        logger.info("üîå Phase 1: Test des connexions locales...")
        mongo_local_ok = migrator.connect_local_mongodb()
        pg_local_ok = migrator.connect_local_postgresql()
        
        if not mongo_local_ok and not pg_local_ok:
            logger.error("‚ùå Aucune connexion locale n'a fonctionn√©")
            logger.info("üí° Assure-toi que tes services locaux sont d√©marr√©s (docker-compose up)")
            return False
        
        # Phase 2: Test des connexions cloud
        logger.info("üåê Phase 2: Test des connexions cloud...")
        
        # MongoDB Atlas
        mongo_cloud_ok = migrator.connect_cloud_mongodb(
            os.getenv("CONNECTING_STRING_ATLAS")
        )
        
        # Neon PostgreSQL
        pg_cloud_ok = migrator.connect_cloud_postgresql(
            os.getenv("CONNECTING_STRING_NEON")
        )
        
        if not mongo_cloud_ok and not pg_cloud_ok:
            logger.error("‚ùå Aucune connexion cloud n'a fonctionn√©")
            logger.info("üí° V√©rifie tes connection strings et la configuration r√©seau")
            return False
        
        # Phase 3: Migrations
        logger.info("üì¶ Phase 3: Migration des donn√©es...")
        
        # Migration MongoDB
        if mongo_local_ok and mongo_cloud_ok:
            logger.info("üçÉ Migration MongoDB en cours...")
            if not migrator.migrate_mongodb_data():
                logger.warning("‚ö†Ô∏è Migration MongoDB √©chou√©e")
                success = False
            else:
                logger.info("‚úÖ Migration MongoDB r√©ussie")
        else:
            logger.warning("‚è≠Ô∏è Migration MongoDB ignor√©e (connexions manquantes)")
        
        # Migration PostgreSQL
        if pg_cloud_ok:
            logger.info("üêò Pr√©paration PostgreSQL en cours...")
            if not migrator.migrate_postgresql_data():
                logger.warning("‚ö†Ô∏è Pr√©paration PostgreSQL √©chou√©e")
                success = False
            else:
                logger.info("‚úÖ Pr√©paration PostgreSQL r√©ussie")
        else:
            logger.warning("‚è≠Ô∏è Pr√©paration PostgreSQL ignor√©e (connexion cloud manquante)")
        
        # R√©sultats finaux
        print("\n" + "=" * 60)
        if success:
            logger.info("üéâ Migration termin√©e avec succ√®s!")
            print("\nüìã Prochaines √©tapes:")
            print("1. V√©rifier les donn√©es sur MongoDB Atlas et Neon")
            print("2. Adapter ton code pour utiliser les connexions cloud")
            print("3. Configurer les secrets sur Streamlit Community Cloud")
            print("4. D√©ployer ton application")
            print("\nüîó Liens utiles:")
            print("- MongoDB Atlas: https://cloud.mongodb.com/")
            print("- Neon Console: https://console.neon.tech/")
            print("- Streamlit Cloud: https://share.streamlit.io/")
        else:
            logger.error("‚ö†Ô∏è Migration termin√©e avec des erreurs")
            logger.info("üí° Consulte les logs ci-dessus pour identifier les probl√®mes")
        
        return success
        
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è Migration interrompue par l'utilisateur")
        return False
        
    except Exception as e:
        logger.error(f"üí• Erreur inattendue: {e}")
        return False
        
    finally:
        migrator.close_connections()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)